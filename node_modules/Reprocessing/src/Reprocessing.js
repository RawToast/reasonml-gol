// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Sys = require("bs-platform/lib/js/sys.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var RGLConstants = require("Reasongl/src/RGLConstants.js");
var Reasongl_web = require("Reasongl/src/web/reasongl_web.js");
var Reprocessing_Env = require("./Reprocessing_Env.js");
var Reprocessing_Draw = require("./Reprocessing_Draw.js");
var Reprocessing_Font = require("./Reprocessing_Font.js");
var Reprocessing_Utils = require("./Reprocessing_Utils.js");
var Reprocessing_Common = require("./Reprocessing_Common.js");
var Reprocessing_Matrix = require("./Reprocessing_Matrix.js");
var Reprocessing_Internal = require("./Reprocessing_Internal.js");
var Reprocessing_Constants = require("./Reprocessing_Constants.js");
var Reprocessing_Hotreload = require("./Reprocessing_Hotreload.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Reprocessing_ClientWrapper = require("./Reprocessing_ClientWrapper.js");

var hotreloadData = Hashtbl.create(/* None */0, 10);

function unwrapOrDefault($$default, opt) {
  if (opt) {
    return opt[0];
  } else {
    return $$default;
  }
}

function identity(a, _) {
  return a;
}

var defaultScreen = "reprocessing-default";

var currentScreen = [defaultScreen];

function setScreenId(id) {
  currentScreen[0] = id;
  return /* () */0;
}

function clearScreenId() {
  currentScreen[0] = defaultScreen;
  return /* () */0;
}

var pauseFns = Hashtbl.create(/* None */0, 10);

function playPause(id, play) {
  var exit = 0;
  var fn;
  try {
    fn = Hashtbl.find(pauseFns, id);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      return /* None */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return /* Some */[Curry._1(fn, play)];
  }
  
}

function hotreload($staropt$star, filename) {
  var screen = $staropt$star ? $staropt$star[0] : defaultScreen;
  Hashtbl.replace(hotreloadData, screen, /* record */[
        /* started */false,
        /* filename */filename,
        /* draw */identity,
        /* mouseMove */identity,
        /* mouseDragged */identity,
        /* mouseDown */identity,
        /* mouseUp */identity,
        /* keyPressed */identity,
        /* keyReleased */identity,
        /* keyTyped */identity
      ]);
  return Reprocessing_Hotreload.checkRebuild(filename);
}

function run(setup, screen, draw, mouseMove, mouseDragged, mouseDown, mouseUp, keyPressed, keyReleased, keyTyped, _) {
  var screen$1 = screen ? screen[0] : currentScreen[0];
  var fns;
  var exit = 0;
  var hr;
  try {
    hr = Hashtbl.find(hotreloadData, screen$1);
    exit = 1;
  }
  catch (exn){
    if (exn === Caml_builtin_exceptions.not_found) {
      var hr$1 = /* record */[
        /* started */false,
        /* filename */"",
        /* draw */unwrapOrDefault(identity, draw),
        /* mouseMove */unwrapOrDefault(identity, mouseMove),
        /* mouseDragged */unwrapOrDefault(identity, mouseDragged),
        /* mouseDown */unwrapOrDefault(identity, mouseDown),
        /* mouseUp */unwrapOrDefault(identity, mouseUp),
        /* keyPressed */unwrapOrDefault(identity, keyPressed),
        /* keyReleased */unwrapOrDefault(identity, keyReleased),
        /* keyTyped */unwrapOrDefault(identity, keyTyped)
      ];
      Hashtbl.replace(hotreloadData, screen$1, hr$1);
      fns = hr$1;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    hr[/* draw */2] = unwrapOrDefault(identity, draw);
    hr[/* keyPressed */7] = unwrapOrDefault(identity, keyPressed);
    hr[/* keyReleased */8] = unwrapOrDefault(identity, keyReleased);
    hr[/* keyTyped */9] = unwrapOrDefault(identity, keyTyped);
    hr[/* mouseMove */3] = unwrapOrDefault(identity, mouseMove);
    hr[/* mouseDragged */4] = unwrapOrDefault(identity, mouseDragged);
    hr[/* mouseDown */5] = unwrapOrDefault(identity, mouseDown);
    hr[/* mouseUp */6] = unwrapOrDefault(identity, mouseUp);
    console.log("Successfully changed functions");
    fns = hr;
  }
  if (fns[/* started */0]) {
    return 0;
  } else {
    fns[/* started */0] = true;
    Random.self_init(/* () */0);
    Reprocessing_Utils.noiseSeed(Random.$$int(Reprocessing_Utils.pow(2, 29)));
    var env = Reprocessing_Internal.createCanvas(Curry._2(Reprocessing_ClientWrapper.init, /* Some */[screen$1], Sys.argv), 200, 200);
    Reprocessing_Font.Font[/* loadDefaultFont */15](env);
    var userState = [Curry._1(setup, env)];
    var width = Curry._1(Reasongl_web.Gl[/* Window */2][/* getWidth */0], env[/* window */1]);
    var height = Curry._1(Reasongl_web.Gl[/* Window */2][/* getHeight */1], env[/* window */1]);
    var data = Reasongl_web.Gl[/* readPixels_RGBA */30](env[/* gl */2], 0, 0, width, height);
    var textureBuffer = Curry._1(Reasongl_web.Gl[/* createTexture */17], env[/* gl */2]);
    Curry._3(Reasongl_web.Gl[/* bindTexture */19], env[/* gl */2], RGLConstants.texture_2d, textureBuffer);
    Reasongl_web.Gl[/* texImage2D_RGBA */41](env[/* gl */2], RGLConstants.texture_2d, 0, width, height, 0, data);
    Curry._4(Reasongl_web.Gl[/* texParameteri */20], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_mag_filter, RGLConstants.linear);
    Curry._4(Reasongl_web.Gl[/* texParameteri */20], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_min_filter, RGLConstants.linear);
    Curry._4(Reasongl_web.Gl[/* texParameteri */20], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_wrap_s, RGLConstants.clamp_to_edge);
    Curry._4(Reasongl_web.Gl[/* texParameteri */20], env[/* gl */2], RGLConstants.texture_2d, RGLConstants.texture_wrap_t, RGLConstants.clamp_to_edge);
    var reDrawPreviousBufferOnSecondFrame = function () {
      var x1 = 0 + width | 0;
      var y1 = 0;
      var x2 = 0;
      var y2 = 0;
      var x3 = 0 + width | 0;
      var y3 = 0 + height | 0;
      var x4 = 0;
      var y4 = 0 + height | 0;
      var verticesColorAndTexture = /* array */[
        x1,
        y1,
        0.0,
        0.0,
        0.0,
        0.0,
        1,
        1.0,
        1.0,
        x2,
        y2,
        0.0,
        0.0,
        0.0,
        0.0,
        1,
        0.0,
        1.0,
        x3,
        y3,
        0.0,
        0.0,
        0.0,
        0.0,
        1,
        1.0,
        0.0,
        x4,
        y4,
        0.0,
        0.0,
        0.0,
        0.0,
        1,
        0.0,
        0.0
      ];
      return Reprocessing_Internal.drawGeometry(Curry._2(Reasongl_web.Gl[/* Bigarray */28][/* of_array */1], /* Float32 */1, verticesColorAndTexture), Curry._2(Reasongl_web.Gl[/* Bigarray */28][/* of_array */1], /* Uint16 */3, /* array */[
                      0,
                      1,
                      2,
                      1,
                      2,
                      3
                    ]), RGLConstants.triangles, 6, textureBuffer, env);
    };
    var playPauseFn = Reasongl_web.Gl[/* render */5](env[/* window */1], /* Some */[(function (_, _$1, x, y) {
              env[/* mouse */12][/* pos */0] = /* tuple */[
                x,
                y
              ];
              env[/* mouse */12][/* pressed */2] = true;
              userState[0] = Curry._2(fns[/* mouseDown */5], userState[0], env);
              return /* () */0;
            })], /* Some */[(function (_, _$1, x, y) {
              env[/* mouse */12][/* pos */0] = /* tuple */[
                x,
                y
              ];
              env[/* mouse */12][/* pressed */2] = false;
              userState[0] = Curry._2(fns[/* mouseUp */6], userState[0], env);
              return /* () */0;
            })], /* Some */[(function (x, y) {
              env[/* mouse */12][/* pos */0] = /* tuple */[
                x,
                y
              ];
              if (env[/* mouse */12][/* pressed */2]) {
                userState[0] = Curry._2(fns[/* mouseDragged */4], userState[0], env);
                return /* () */0;
              } else {
                userState[0] = Curry._2(fns[/* mouseMove */3], userState[0], env);
                return /* () */0;
              }
            })], /* Some */[(function (keycode, repeat) {
              env[/* keyboard */11][/* keyCode */0] = keycode;
              if (!repeat) {
                userState[0] = Curry._2(fns[/* keyPressed */7], userState[0], env);
                env[/* keyboard */11][/* pressed */1] = Curry._2(Reprocessing_Common.KeySet[/* add */3], keycode, env[/* keyboard */11][/* pressed */1]);
                env[/* keyboard */11][/* down */3] = Curry._2(Reprocessing_Common.KeySet[/* add */3], keycode, env[/* keyboard */11][/* down */3]);
              }
              userState[0] = Curry._2(fns[/* keyTyped */9], userState[0], env);
              return /* () */0;
            })], /* Some */[(function (keycode) {
              env[/* keyboard */11][/* keyCode */0] = keycode;
              env[/* keyboard */11][/* released */2] = Curry._2(Reprocessing_Common.KeySet[/* add */3], keycode, env[/* keyboard */11][/* released */2]);
              env[/* keyboard */11][/* down */3] = Curry._2(Reprocessing_Common.KeySet[/* remove */5], keycode, env[/* keyboard */11][/* down */3]);
              userState[0] = Curry._2(fns[/* keyReleased */8], userState[0], env);
              return /* () */0;
            })], /* Some */[(function () {
              if (env[/* size */18][/* resizeable */2]) {
                var height = Curry._1(Reasongl_web.Gl[/* Window */2][/* getHeight */1], env[/* window */1]);
                var width = Curry._1(Reasongl_web.Gl[/* Window */2][/* getWidth */0], env[/* window */1]);
                return Reprocessing_Internal.resetSize(env, width, height);
              } else {
                return Reprocessing_Env.size(Reprocessing_Env.width(env), Reprocessing_Env.height(env), env);
              }
            })], (function (f) {
            if (env[/* frame */15][/* count */0] === 2) {
              reDrawPreviousBufferOnSecondFrame(/* () */0);
            }
            var exit = 0;
            var val;
            try {
              val = Hashtbl.find(hotreloadData, screen$1);
              exit = 1;
            }
            catch (exn){
              if (exn !== Caml_builtin_exceptions.not_found) {
                throw exn;
              }
              
            }
            if (exit === 1) {
              Reprocessing_Hotreload.checkRebuild(fns[/* filename */1]);
            }
            userState[0] = Curry._2(fns[/* draw */2], userState[0], env);
            var f$1 = f;
            var env$1 = env;
            var rate = 1000 / f$1 | 0;
            env$1[/* mouse */12][/* prevPos */1] = env$1[/* mouse */12][/* pos */0];
            env$1[/* frame */15] = /* record */[
              /* count */env$1[/* frame */15][/* count */0] + 1 | 0,
              /* rate */rate,
              /* deltaTime */f$1 / 1000
            ];
            env$1[/* keyboard */11][/* released */2] = Reprocessing_Common.KeySet[/* empty */0];
            env$1[/* keyboard */11][/* pressed */1] = Reprocessing_Common.KeySet[/* empty */0];
            Reprocessing_Matrix.copyInto(Reprocessing_Matrix.identity, env$1[/* matrix */16]);
            if (env$1[/* batch */10][/* elementPtr */3] > 0) {
              return Reprocessing_Internal.flushGlobalBatch(env$1);
            } else {
              return 0;
            }
          }), /* () */0);
    return Hashtbl.replace(pauseFns, screen$1, playPauseFn);
  }
}

var Draw = 0;

var Env = 0;

var Events = 0;

var Utils = 0;

var Constants = 0;

exports.Draw = Draw;
exports.Env = Env;
exports.Events = Events;
exports.Utils = Utils;
exports.Constants = Constants;
exports.hotreload = hotreload;
exports.setScreenId = setScreenId;
exports.clearScreenId = clearScreenId;
exports.playPause = playPause;
exports.run = run;
/* hotreloadData Not a pure module */
