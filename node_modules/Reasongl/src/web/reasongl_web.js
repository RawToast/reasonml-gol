// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var Js = require("bs-platform/lib/js/js.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Events = require("../events.js");
var GlMatrix = require("gl-matrix");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var RGLConstants = require("../RGLConstants.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$window = (window);

var Document = /* module */[/* window */$$window];

function createCanvas() {
  return document.createElement("canvas");
}

var makeAudioContext = ( function() { return new (window.AudioContext || window.webkitAudioContext)(); } );

function readFile(filename, cb) {
  var rawFile = new XMLHttpRequest();
  rawFile.open("GET", filename, Js.false_);
  rawFile.onreadystatechange = (function () {
      if (rawFile.readyState === 4 && (rawFile.status === 200 || rawFile.status === 0)) {
        return Curry._1(cb, rawFile.responseText);
      } else {
        return 0;
      }
    });
  rawFile.send(null);
  return /* () */0;
}

var File = /* module */[/* readFile */readFile];

function getWidth(param) {
  return param[0].width / window.devicePixelRatio | 0;
}

function getHeight(param) {
  return param[0].height / window.devicePixelRatio | 0;
}

function getPixelWidth(param) {
  return param[0].width | 0;
}

function getPixelHeight(param) {
  return param[0].height | 0;
}

function getPixelScale() {
  return window.devicePixelRatio;
}

function init(screen, _) {
  var node = screen ? Js_primitive.null_undefined_to_opt(document.getElementById(screen[0])) : /* None */0;
  var canvas;
  if (node) {
    canvas = node[0];
  } else {
    var canvas$1 = document.createElement("canvas");
    document.body.appendChild(canvas$1);
    canvas = canvas$1;
  }
  canvas.style.backgroundColor = "black";
  return /* tuple */[
          canvas,
          Curry._1(makeAudioContext, /* () */0)
        ];
}

function setWindowSize(param, width, height) {
  var w = param[0];
  w.width = width * window.devicePixelRatio | 0;
  w.height = height * window.devicePixelRatio | 0;
  w.style.width = String(width) + "px";
  w.style.height = String(height) + "px";
  return /* () */0;
}

function getContext(param) {
  return param[0].getContext("webgl", {
              preserveDrawingBuffer: true,
              antialias: true
            });
}

var Window = /* module */[
  /* getWidth */getWidth,
  /* getHeight */getHeight,
  /* getPixelWidth */getPixelWidth,
  /* getPixelHeight */getPixelHeight,
  /* getPixelScale */getPixelScale,
  /* init */init,
  /* setWindowSize */setWindowSize,
  /* getContext */getContext
];

function loadSound(param, path, cb) {
  var audioctx = param[1];
  var rawFile = new XMLHttpRequest();
  rawFile.responseType = "arraybuffer";
  rawFile.open("GET", path, Js.true_);
  rawFile.onreadystatechange = (function () {
      if (rawFile.readyState === 4 && (rawFile.status === 200 || rawFile.status === 0)) {
        audioctx.decodeAudioData(rawFile.response, cb);
        return /* () */0;
      } else {
        return 0;
      }
    });
  rawFile.send(null);
  return /* () */0;
}

function playSound(param, sound, volume, loop) {
  var audioctx = param[1];
  var src = audioctx.createBufferSource();
  var gain = audioctx.createGain();
  gain.gain.value = volume;
  src.buffer = sound;
  src.connect(gain);
  gain.connect(audioctx.destination);
  src.start(0.0);
  src.loop = loop;
  return /* () */0;
}

var Audio = /* module */[
  /* loadSound */loadSound,
  /* playSound */playSound
];

function render(param, mouseDown, mouseUp, mouseMove, keyDown, keyUp, windowResize, displayFunc, _) {
  var canvas = param[0];
  if (mouseDown) {
    var cb = mouseDown[0];
    canvas.addEventListener("mousedown", (function (e) {
            var match = e.button;
            var button;
            if (match > 2 || match < 0) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "reasongl_web.re",
                      292,
                      19
                    ]
                  ];
            } else {
              button = match;
            }
            var rect = canvas.getBoundingClientRect();
            var x = e.clientX - rect.left | 0;
            var y = e.clientY - rect.top | 0;
            return Curry._4(cb, button, /* MouseDown */0, x, y);
          }));
  }
  if (mouseUp) {
    var cb$1 = mouseUp[0];
    canvas.addEventListener("mouseup", (function (e) {
            var match = e.button;
            var button;
            if (match > 2 || match < 0) {
              throw [
                    Caml_builtin_exceptions.assert_failure,
                    [
                      "reasongl_web.re",
                      314,
                      19
                    ]
                  ];
            } else {
              button = match;
            }
            var rect = canvas.getBoundingClientRect();
            var x = e.clientX - rect.left | 0;
            var y = e.clientY - rect.top | 0;
            return Curry._4(cb$1, button, /* MouseUp */1, x, y);
          }));
  }
  if (mouseMove) {
    var cb$2 = mouseMove[0];
    canvas.addEventListener("mousemove", (function (e) {
            var rect = canvas.getBoundingClientRect();
            var x = e.clientX - rect.left | 0;
            var y = e.clientY - rect.top | 0;
            return Curry._2(cb$2, x, y);
          }));
  }
  var keyLastPressed = [/* [] */0];
  if (keyDown) {
    var cb$3 = keyDown[0];
    $$window.addEventListener("keydown", (function (e) {
            var keycode = e.which;
            var repeat = List.fold_left((function (acc, k) {
                    if (acc) {
                      return true;
                    } else {
                      return k === keycode;
                    }
                  }), false, keyLastPressed[0]);
            if (!repeat) {
              keyLastPressed[0] = /* :: */[
                keycode,
                keyLastPressed[0]
              ];
            }
            return Curry._2(cb$3, Events.keycodeMap(keycode), repeat);
          }));
  }
  if (keyUp) {
    var cb$4 = keyUp[0];
    $$window.addEventListener("keyup", (function (e) {
            var keycode = e.which;
            keyLastPressed[0] = List.filter((function (k) {
                      return k !== keycode;
                    }))(keyLastPressed[0]);
            return Curry._1(cb$4, Events.keycodeMap(keycode));
          }));
  }
  if (windowResize) {
    var cb$5 = windowResize[0];
    $$window.addEventListener("resize", (function () {
            return Curry._1(cb$5, /* () */0);
          }));
  }
  var frame = [/* None */0];
  var tick = function (prev, _) {
    var now = Date.now();
    Curry._1(displayFunc, now - prev);
    var id = window.requestAnimationFrame((function (param) {
            return tick(now, param);
          }));
    frame[0] = /* Some */[id];
    canvas.__hiddenrafid = id;
    return /* () */0;
  };
  var partial_arg = Date.now();
  var id = window.requestAnimationFrame((function (param) {
          return tick(partial_arg, param);
        }));
  frame[0] = /* Some */[id];
  canvas.__hiddenrafid = id;
  return (function (play) {
      var match = frame[0];
      if (match) {
        if (play) {
          return true;
        } else {
          window.cancelAnimationFrame(match[0]);
          frame[0] = /* None */0;
          return false;
        }
      } else if (play) {
        var partial_arg = Date.now();
        var id = window.requestAnimationFrame((function (param) {
                return tick(partial_arg, param);
              }));
        frame[0] = /* Some */[id];
        canvas.__hiddenrafid = id;
        return true;
      } else {
        return false;
      }
    });
}

function shaderSource(context, shader, source) {
  context.shaderSource(shader, "#version 100 \n precision highp float; \n" + source);
  return /* () */0;
}

function create(kind, size) {
  switch (kind) {
    case 0 : 
        return new Float64Array(size);
    case 1 : 
        return new Float32Array(size);
    case 2 : 
        return new Int16Array(size);
    case 3 : 
        return new Uint16Array(size);
    case 4 : 
        return new Int8Array(size);
    case 5 : 
    case 6 : 
        return new Uint8Array(size);
    case 8 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "reasongl_web.re",
                603,
                17
              ]
            ];
    case 7 : 
    case 9 : 
        return new Int32Array(size);
    
  }
}

function of_array(kind, arr) {
  switch (kind) {
    case 0 : 
        return new Float64Array(arr);
    case 1 : 
        return new Float32Array(arr);
    case 2 : 
        return new Int16Array(arr);
    case 3 : 
        return new Uint16Array(arr);
    case 4 : 
        return new Int8Array(arr);
    case 5 : 
    case 6 : 
        return new Uint8Array(arr);
    case 8 : 
        throw [
              Caml_builtin_exceptions.assert_failure,
              [
                "reasongl_web.re",
                616,
                17
              ]
            ];
    case 7 : 
    case 9 : 
        return new Int32Array(arr);
    
  }
}

function unsafe_blit(arr, arr2, offset, _) {
  arr2.set(arr, offset);
  return /* () */0;
}

function sub(arr, offset, len) {
  return arr.subarray(offset, offset + len | 0);
}

function readPixels_RGBA(context, x, y, width, height) {
  var data = new Uint8Array((Caml_int32.imul(width, height) << 2));
  context.readPixels(x, y, width, height, RGLConstants.rgba, RGLConstants.unsigned_byte, data);
  return data;
}

function loadImage(filename, _, callback, _$1) {
  var image = new Image();
  image.src = filename;
  image.addEventListener("load", (function () {
          return Curry._1(callback, /* Some */[image]);
        }));
  return /* () */0;
}

function loadImageFromMemory(data, _, callback, _$1) {
  var image = new Image();
  image.src = "data:image/png;base64," + btoa(data);
  image.addEventListener("load", (function () {
          return Curry._1(callback, /* Some */[image]);
        }));
  return /* () */0;
}

function texImage2DWithImage(context, target, level, image) {
  context.texImage2D(target, level, RGLConstants.rgba, RGLConstants.rgba, RGLConstants.unsigned_byte, image);
  return /* () */0;
}

function texImage2D_RGBA(context, target, level, width, height, border, data) {
  context.texImage2D(target, level, RGLConstants.rgba, width, height, border, RGLConstants.rgba, RGLConstants.unsigned_byte, data);
  return /* () */0;
}

var texImage2D_null = ( function(gl, target, level, width, height) {
    gl.texImage2D(target, level, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null)
  } );

function vertexAttribPointer(context, attribute, size, type_, normalize, stride, offset) {
  var normalize$1 = normalize ? Js.true_ : Js.false_;
  context.vertexAttribPointer(attribute, size, type_, normalize$1, stride, offset);
  return /* () */0;
}

function to_array(a) {
  return a;
}

function Mat4_001() {
  return GlMatrix.mat4.create();
}

function Mat4_002(prim) {
  GlMatrix.mat4.identity(prim);
  return /* () */0;
}

function Mat4_003(prim, prim$1, prim$2) {
  GlMatrix.mat4.translate(prim, prim$1, prim$2);
  return /* () */0;
}

function Mat4_004(prim, prim$1, prim$2) {
  GlMatrix.mat4.scale(prim, prim$1, prim$2);
  return /* () */0;
}

function Mat4_005(prim, prim$1, prim$2, prim$3) {
  GlMatrix.mat4.rotate(prim, prim$1, prim$2, prim$3);
  return /* () */0;
}

function Mat4_006(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6) {
  GlMatrix.mat4.ortho(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6);
  return /* () */0;
}

var Mat4 = /* module */[
  /* to_array */to_array,
  Mat4_001,
  Mat4_002,
  Mat4_003,
  Mat4_004,
  Mat4_005,
  Mat4_006
];

function uniformMatrix4fv(context, $$location, value) {
  context.uniformMatrix4fv($$location, Js.false_, value);
  return /* () */0;
}

function getProgramParameter(context, program, paramName) {
  switch (paramName) {
    case 0 : 
        if (context.getProgramParameter(program, context.DELETE_STATUS)) {
          return 1;
        } else {
          return 0;
        }
    case 1 : 
        if (context.getProgramParameter(program, context.LINK_STATUS)) {
          return 1;
        } else {
          return 0;
        }
    case 2 : 
        if (context.getProgramParameter(program, context.VALIDATE_STATUS)) {
          return 1;
        } else {
          return 0;
        }
    
  }
}

function getShaderParameter(context, shader, paramName) {
  switch (paramName) {
    case 0 : 
        if (context.getShaderParameter(shader, context.DELETE_STATUS)) {
          return 1;
        } else {
          return 0;
        }
    case 1 : 
        if (context.getShaderParameter(shader, context.COMPILE_STATUS)) {
          return 1;
        } else {
          return 0;
        }
    case 2 : 
        return context.getShaderParameter(shader, context.SHADER_TYPE);
    
  }
}

var Gl_004 = /* Events : Events */[Events.keycodeMap];

function Gl_006(prim, prim$1, prim$2, prim$3, prim$4) {
  prim.clearColor(prim$1, prim$2, prim$3, prim$4);
  return /* () */0;
}

function Gl_007(prim) {
  return prim.createProgram();
}

function Gl_008(prim, prim$1) {
  return prim.createShader(prim$1);
}

function Gl_009(prim, prim$1, prim$2) {
  prim.attachShader(prim$1, prim$2);
  return /* () */0;
}

function Gl_010(prim, prim$1) {
  prim.deleteShader(prim$1);
  return /* () */0;
}

function Gl_012(prim, prim$1) {
  prim.compileShader(prim$1);
  return /* () */0;
}

function Gl_013(prim, prim$1) {
  prim.linkProgram(prim$1);
  return /* () */0;
}

function Gl_014(prim, prim$1) {
  prim.useProgram(prim$1);
  return /* () */0;
}

function Gl_015(prim) {
  return prim.createBuffer();
}

function Gl_016(prim, prim$1, prim$2) {
  prim.bindBuffer(prim$1, prim$2);
  return /* () */0;
}

function Gl_017(prim) {
  return prim.createTexture();
}

function Gl_018(prim, prim$1) {
  prim.activeTexture(prim$1);
  return /* () */0;
}

function Gl_019(prim, prim$1, prim$2) {
  prim.bindTexture(prim$1, prim$2);
  return /* () */0;
}

function Gl_020(prim, prim$1, prim$2, prim$3) {
  prim.texParameteri(prim$1, prim$2, prim$3);
  return /* () */0;
}

function Gl_021(prim) {
  return prim.createFramebuffer();
}

function Gl_022(prim, prim$1, prim$2) {
  prim.bindFramebuffer(prim$1, prim$2);
  return /* () */0;
}

function Gl_023(prim, prim$1) {
  prim.bindFramebuffer(prim$1, null);
  return /* () */0;
}

function Gl_024(prim, prim$1, prim$2, prim$3, prim$4) {
  prim.framebufferTexture2D(prim$1, prim$2, prim$3, prim$4, (0));
  return /* () */0;
}

function Gl_025(prim, prim$1) {
  prim.enable(prim$1);
  return /* () */0;
}

function Gl_026(prim, prim$1) {
  prim.disable(prim$1);
  return /* () */0;
}

function Gl_027(prim, prim$1, prim$2) {
  prim.blendFunc(prim$1, prim$2);
  return /* () */0;
}

var Gl_028 = /* Bigarray */[
  create,
  of_array,
  (function (prim) {
      return prim.length;
    }),
  (function (prim, prim$1) {
      prim.set(prim$1);
      return /* () */0;
    }),
  unsafe_blit,
  (function (prim, prim$1) {
      return prim[prim$1];
    }),
  (function (prim, prim$1) {
      return prim[prim$1];
    }),
  (function (prim, prim$1, prim$2) {
      prim[prim$1] = prim$2;
      return /* () */0;
    }),
  (function (prim, prim$1, prim$2) {
      prim[prim$1] = prim$2;
      return /* () */0;
    }),
  sub
];

function Gl_029(prim, prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9) {
  prim.texSubImage2D(prim$1, prim$2, prim$3, prim$4, prim$5, prim$6, prim$7, prim$8, prim$9);
  return /* () */0;
}

function Gl_031(prim) {
  return prim.width;
}

function Gl_032(prim) {
  return prim.height;
}

function Gl_036(prim, prim$1, prim$2) {
  prim.uniform1i(prim$1, prim$2);
  return /* () */0;
}

function Gl_037(prim, prim$1, prim$2) {
  prim.uniform1f(prim$1, prim$2);
  return /* () */0;
}

function Gl_038(prim, prim$1, prim$2, prim$3) {
  prim.uniform2f(prim$1, prim$2, prim$3);
  return /* () */0;
}

function Gl_039(prim, prim$1, prim$2, prim$3, prim$4) {
  prim.uniform3f(prim$1, prim$2, prim$3, prim$4);
  return /* () */0;
}

function Gl_040(prim, prim$1, prim$2, prim$3, prim$4, prim$5) {
  prim.uniform4f(prim$1, prim$2, prim$3, prim$4, prim$5);
  return /* () */0;
}

function Gl_043(prim, prim$1, prim$2, prim$3) {
  prim.bufferData(prim$1, prim$2, prim$3);
  return /* () */0;
}

function Gl_044(prim, prim$1, prim$2, prim$3, prim$4) {
  prim.viewport(prim$1, prim$2, prim$3, prim$4);
  return /* () */0;
}

function Gl_045(prim, prim$1) {
  prim.clear(prim$1);
  return /* () */0;
}

function Gl_046(prim, prim$1, prim$2) {
  return prim.getUniformLocation(prim$1, prim$2);
}

function Gl_047(prim, prim$1, prim$2) {
  return prim.getAttribLocation(prim$1, prim$2);
}

function Gl_048(prim, prim$1) {
  prim.enableVertexAttribArray(prim$1);
  return /* () */0;
}

function Gl_050(prim, prim$1, prim$2) {
  prim.vertexAttribDivisor(prim$1, prim$2);
  return /* () */0;
}

function Gl_055(prim, prim$1) {
  return prim.getShaderInfoLog(prim$1);
}

function Gl_056(prim, prim$1) {
  return prim.getProgramInfoLog(prim$1);
}

function Gl_057(prim, prim$1) {
  return prim.getShaderSource(prim$1);
}

function Gl_058(prim, prim$1, prim$2, prim$3) {
  prim.drawArrays(prim$1, prim$2, prim$3);
  return /* () */0;
}

function Gl_059(prim, prim$1, prim$2, prim$3, prim$4) {
  prim.drawElements(prim$1, prim$2, prim$3, prim$4);
  return /* () */0;
}

function Gl_060(prim, prim$1, prim$2, prim$3, prim$4, prim$5) {
  prim.drawElementsInstanced(prim$1, prim$2, prim$3, prim$4, prim$5);
  return /* () */0;
}

var Gl = /* module */[
  /* target */"web",
  /* File */File,
  /* Window */Window,
  /* Audio */Audio,
  Gl_004,
  /* render */render,
  Gl_006,
  Gl_007,
  Gl_008,
  Gl_009,
  Gl_010,
  /* shaderSource */shaderSource,
  Gl_012,
  Gl_013,
  Gl_014,
  Gl_015,
  Gl_016,
  Gl_017,
  Gl_018,
  Gl_019,
  Gl_020,
  Gl_021,
  Gl_022,
  Gl_023,
  Gl_024,
  Gl_025,
  Gl_026,
  Gl_027,
  Gl_028,
  Gl_029,
  /* readPixels_RGBA */readPixels_RGBA,
  Gl_031,
  Gl_032,
  /* loadImage */loadImage,
  /* loadImageFromMemory */loadImageFromMemory,
  /* texImage2DWithImage */texImage2DWithImage,
  Gl_036,
  Gl_037,
  Gl_038,
  Gl_039,
  Gl_040,
  /* texImage2D_RGBA */texImage2D_RGBA,
  /* texImage2D_null */texImage2D_null,
  Gl_043,
  Gl_044,
  Gl_045,
  Gl_046,
  Gl_047,
  Gl_048,
  /* vertexAttribPointer */vertexAttribPointer,
  Gl_050,
  /* Mat4 */Mat4,
  /* uniformMatrix4fv */uniformMatrix4fv,
  /* getProgramParameter */getProgramParameter,
  /* getShaderParameter */getShaderParameter,
  Gl_055,
  Gl_056,
  Gl_057,
  Gl_058,
  Gl_059,
  Gl_060
];

exports.Document = Document;
exports.createCanvas = createCanvas;
exports.makeAudioContext = makeAudioContext;
exports.Gl = Gl;
/* window Not a pure module */
