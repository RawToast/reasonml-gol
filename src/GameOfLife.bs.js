// Generated by BUCKLESCRIPT VERSION 3.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Random = require("bs-platform/lib/js/random.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");

function createGrid(width, height) {
  return $$Array.make_matrix(height, width, /* Dead */0);
}

function gridMap(fn, grid) {
  return $$Array.mapi((function (yi, row) {
                return $$Array.mapi((function (xi, cell) {
                              return Curry._2(fn, /* tuple */[
                                          yi,
                                          xi
                                        ], cell);
                            }), row);
              }), grid);
}

function randomizeGrid(chance, grid, seed) {
  if (seed) {
    Random.init(seed[0]);
  }
  return gridMap((function (_, _$1) {
                var n = Random.$$float(1);
                var match = n >= chance;
                if (match) {
                  return /* Live */1;
                } else {
                  return /* Dead */0;
                }
              }), grid);
}

function getCell(param, grid) {
  var xi = param[1];
  var yi = param[0];
  if (yi < 0 || yi >= grid.length || xi < 0 || xi >= Caml_array.caml_array_get(grid, 0).length) {
    return /* Dead */0;
  } else {
    return Caml_array.caml_array_get(Caml_array.caml_array_get(grid, yi), xi);
  }
}

function countNeighbours(param, grid) {
  var xi = param[1];
  var yi = param[0];
  return List.fold_left((function (total, param) {
                var y = yi + param[0] | 0;
                var x = xi + param[1] | 0;
                var cell = getCell(/* tuple */[
                      y,
                      x
                    ], grid);
                if (cell) {
                  return total + 1 | 0;
                } else {
                  return total;
                }
              }), 0, /* :: */[
              /* tuple */[
                -1,
                -1
              ],
              /* :: */[
                /* tuple */[
                  -1,
                  0
                ],
                /* :: */[
                  /* tuple */[
                    -1,
                    1
                  ],
                  /* :: */[
                    /* tuple */[
                      0,
                      -1
                    ],
                    /* :: */[
                      /* tuple */[
                        0,
                        1
                      ],
                      /* :: */[
                        /* tuple */[
                          1,
                          -1
                        ],
                        /* :: */[
                          /* tuple */[
                            1,
                            0
                          ],
                          /* :: */[
                            /* tuple */[
                              1,
                              1
                            ],
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function iterate(grid) {
  return gridMap((function (coords, cell) {
                var neighboursCount = countNeighbours(coords, grid);
                if (neighboursCount > 2 || neighboursCount < 0) {
                  return cell;
                } else {
                  return /* Dead */0;
                }
              }), grid);
}

exports.createGrid = createGrid;
exports.gridMap = gridMap;
exports.randomizeGrid = randomizeGrid;
exports.getCell = getCell;
exports.countNeighbours = countNeighbours;
exports.iterate = iterate;
/* No side effect */
